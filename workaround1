
# Configure the AWS Provider

provider "aws" {
  access_key = "${var.aws_access_key}"
  secret_key = "${var.aws_secret_key}"
  region     = "us-east-1"
}



#create s3Bucket
resource "aws_s3_bucket" "b" {
  bucket = "TestBucket"
  acl    = "public-read"
 }
  
resource "aws_s3_bucket" "log_bucket" {
  bucket = "my_tf_log_bucket"
  acl    = "log-delivery-write"
}

resource "aws_s3_bucket_object" "object" {
  bucket = "your_bucket_name"
  key    = "new_object_key"
  source = "path/to/file"
  etag   = "${md5(file("path/to/file"))}"
  
 }
 
  website {
    index_document = "index.html"
    error_document = "error.html"
	}
	
   versioning {
    enabled = true
  }
  
  logging {
    target_bucket = "${aws_s3_bucket.log_bucket.id}"
    target_prefix = "log/"
  }

  tags {
    Name        = "My bucket"
    Environment = "Dev"
  }
  
   
provisioner  "remote-exec" {
  inline = [
    "chmod +x /etc/ansible/playbooks/s3copy.yml",
	"cd /etc/ansible/plabooks/",
	"ansible-playbook s3copy.yml"
   ]
}
  
   
}
- hosts: <Publicip>
  user: root
  become: yes
  gather_facts: yes
  tasks:
    - name : Download Terraform software
      get_url: https://releases.hashicorp.com/terraform/0.10.2/terraform_0.10.2_linux_amd64.zip?_ga=2.196228268.1257085564.1503566885497200374.1503566885 dest=/root/Downloads
      
   - name: unarchive the nagios core file
       unarchive: src=/root/Downloads/terraform_0.10.0_linux_amd64.zip dest=/root/Downloads copy=no
   
   - name: Create an empty bucket
      s3:
        bucket: mybucket
        mode: create
        permission: 'public-read-write'

   - name: Simple GET operation
      s3:
       bucket: mybucket
       object: /my/desired/key.txt
       dest: /usr/local/myfile.txt
       mode: get

   - name: Get a specific version of an object.
      s3:
       bucket: mybucket
       object: /my/desired/key.txt
       version: 48c9ee5131af7a716edc22df9772aa6f
       dest: /usr/local/myfile.txt
       mode: get


      s3:
        bucket: mybucket
        object: /my/desired/key.txt
        src: /usr/local/myfile.txt
        mode: put


// Copy MyFile.txt in current directory to s3://my-bucket/path
$ aws s3 cp MyFile.txt s3://my-bucket/path/
80
AWS Command Line Interface User Guide
Using API Level (s3api) Commands
// Move all .jpg files in s3://my-bucket/path to ./MyDirectory
$ aws s3 mv s3://my-bucket/path ./MyDirectory --exclude '*' --include '*.jpg' --recursive
// List the contents of my-bucket
$ aws s3 ls s3://my-bucket
// List the contents of path in my-bucket
$ aws s3 ls s3://my-bucket/path/
// Deletes3://my-bucket/path/MyFile.txt
$ aws s3 rm s3://my-bucket/path/MyFile.txt
// Delete s3://my-bucket/path and all of its contents
$ aws s3 rm s3://my-bucket/path --recursive






$ git clone git://github.com/ansible/ansible.git --recursive
$ cd ./ansible
$ make rpm
$ sudo rpm -Uvh ./rpm-build/ansible-*.noarch.rpm
